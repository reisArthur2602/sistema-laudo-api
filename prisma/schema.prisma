generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  MEMBER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  memberOn  Member[] @relation("UserMembers")
  createdAt DateTime @default(now())
}

model Organization {
  id          String        @id @default(cuid())
  name        String
  slug        String       @unique
  members     Member[]      @relation("OrgMembers")
  invites     Invite[]      @relation("OrgInvites")
  patients    Patient[]     @relation("OrgPatients")
  equipments  Equipment[]   @relation("OrgEquipments")
  createdAt   DateTime      @default(now())
}

model Equipment {
  id              String        @id @default(cuid())
  name            String
  organization    Organization  @relation("OrgEquipments", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  createdAt       DateTime      @default(now())
}

model Member {
  id              String        @id @default(cuid())
  user            User          @relation("UserMembers", fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  organization    Organization  @relation("OrgMembers", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  role            Role
  createdAt       DateTime      @default(now())

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Invite {
  id               String        @id @default(cuid())
  organization     Organization  @relation("OrgInvites", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String
  email   String
  role             Role
  expireAt        DateTime
   @@unique([email, organizationId])
}


model Patient {
  id              String        @id @default(cuid())
  name            String
  cpf             String        @unique
  organization    Organization  @relation("OrgPatients", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String

  studies         Study[]
  createdAt       DateTime      @default(now())
}

model StudyAttachment {
  id        String   @id @default(cuid())
  study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId   String
  filename  String
  mimeType  String
  size      Int
  path      String
  url       String
  createdAt DateTime @default(now())

  @@index([studyId])
}

model Study {
  id          String           @id @default(cuid())
  patient     Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
  instances   Instance[]
  attachments StudyAttachment[]
  createdAt   DateTime         @default(now())
}

model Instance {
  id          String      @id @default(cuid())
  study       Study       @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId     String
  previewUrl  String
  dicomUrl    String
  createdAt   DateTime    @default(now())
}
