generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  memberOn  Member[] @relation("UserMembers")
  createdAt DateTime @default(now())
}

model Organization {
  id        String      @id @default(cuid())
  name      String
  members   Member[]    @relation("OrgMembers")
  invites   Invite[]    @relation("OrgInvites")
  patients  Patient[]   @relation("OrgPatients")
  createdAt DateTime    @default(now())
}

model Member {
  id              String        @id @default(cuid())
  user            User          @relation("UserMembers", fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  organization    Organization  @relation("OrgMembers", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  role            Role
  active          Boolean       @default(false)
  createdAt       DateTime      @default(now())

  @@unique([userId, organizationId])
}

model Invite {
  id              String        @id @default(cuid())
  organization    Organization  @relation("OrgInvites", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  email           String
  role            Role
  token           String        @unique
  expiresAt       DateTime
  createdAt       DateTime      @default(now())
}

model Patient {
  id              String        @id @default(cuid())
  organization    Organization  @relation("OrgPatients", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  name            String
  patientId       String?
  studies         Study[]       @relation("PatientStudies")
  createdAt       DateTime      @default(now())
}

model Study {
  id          String     @id @default(cuid())
  patient     Patient    @relation("PatientStudies", fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
  studyId     String
  modality    String
  studyDate   DateTime
  series      Series[]   @relation("StudySeries")
  reports     Report[]   @relation("StudyReports")
  createdAt   DateTime   @default(now())
}

model Series {
  id            String      @id @default(cuid())
  study         Study       @relation("StudySeries", fields: [studyId], references: [id], onDelete: Cascade)
  studyId       String
  modality      String
  orthancId     String
  operatorName  String?
  instances     Instance[]  @relation("SeriesInstances")
  createdAt     DateTime    @default(now())
}

model Instance {
  id          String    @id @default(cuid())
  series      Series    @relation("SeriesInstances", fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId    String
  orthancId   String
  previewUrl  String?
  fileUrl     String?
  createdAt   DateTime  @default(now())
}

model Report {
  id          String    @id @default(cuid())
  study       Study     @relation("StudyReports", fields: [studyId], references: [id], onDelete: Cascade)
  studyId     String
  name        String
  path        String
  createdAt   DateTime  @default(now())
}
